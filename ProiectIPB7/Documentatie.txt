***BD si Securitate**********
*      Documentatie         *
*****************************

->	BD din pachetul bd este clasa mare care contine toate metodele pentru accesul la Baza de date.
->	Trebuie adaugat in path-ul proiectului o versiune a driverului de la Oracle( ojdbc.jar ).
->	Pentru evitarea conflictelor de concurenta este recomandat ca fiecare client sa aiba propriul obiect BD instantat.

1) Clasa BD contine urmatoarele metode:
	-> BD() Constructorul face conexiunea obiectului la baza de date.

        -> isConnected() returneaza true  daca s-a facut cu succes conexiunea la baza de date in constructor;
				     false altfel.

	-> setDomeniu() seteaza domeniul pentru crearea linkului de activare. Exemplu <domeniu>/activate/<cod_activare> 

	-> getContByToken( String token ) returneaza Intrarea din Conturi avand acel token;
					  in caz de eroare sau in cazul in care nu avem o astfel de intrare returneaza null.
					  
	-> setTokenByIdCont( int id, String token ) returneaza 0 daca reuseste;
						    returneaza -1 daca nu exista un cont cu acel id;
						    returneaza -7 in caz de exceptie si returneaza codul de eroare.
						    
	-> createAccess( String username ) pentru username-ul primit ca parametru seteaza variabila membru access cu un anume tip de acces la baza de date (pentru profesor - AccessProfesorBD, pentru student - AccessStudentBD, etc. ).
	
	-> login( String username, String hashparola ) returneaza 0  daca logarea a reusit: contul este existent si activat, parola este corecta;
					apeleaza metoda createAccess si returneaza valoarea variabilei membru access;
					returneaza null in cazul unor erori aparute in timpul executiei metodei si afiseaza in consola mesajul de eroare.

	-> verificare( String hashcod )  returneaza -1 daca nu este nici un cont cu acest cod de activare asociat;
					returneaza  0 daca contul a fost activat cu succes;
					returneaza -7 in cazul unor erori aparute in timpul executiei metodei si afiseaza in consola mesajul de eroare.

    -> inregistrare_stud ( String email, String parola ) 
					returneaza -1 daca emailul nu este corect sau nu apartine domeniului info.uaic.ro;
					returneaza -2 daca emailul este deja folosit pentru inregistrarea unui cont;
					returneaza -7 in cazul unor erori aparute in timpul executiei metodei si afiseaza in consola mesajul de eroare.
					
    -> inregistrare_prof ( String username, String parola ) // username-ul sa fie de forma prenume.nume deoarece se face legatura cu un profesor din lista
					returneaza -1 daca profesorul nu este in lista de profesori;
					returneaza -2 daca exista deja un cont cu acest username;
					returneaza -7 in cazul unor erori aparute in timpul executiei metodei si afiseaza in consola mesajul de eroare.
	
		
2) Metodele din AccessBD lucreaza cu obiecte de tip Intrare<NumeTabel> care contin campurile din tabele ca membri.
	Cele trei metode sunt select<NumeTabel> ()
		Ex: List<IntrareMesaje> mesaje = accessAdmin.selectMesaje();
		    update<NumeIntrareTabel> ( Intrare<NumeTabel> )
		Ex: accessAdmin.updateMesaj( new IntrareMesaje() );
		    insert<NumeIntrareTabel> ( Intrare<NumeTabel> )
		Ex: accessAdmin.insertMesaj( new IntrareMesaje() );
		    drop<NumeIntrareTabel> (Intrare<NumeTabeL> )
		Ex: acecssAdmin.dropMesaj( new IntrareMesaje() );
								  
	Identificarea intrarilor se face dupa membrul id:
		-> in caz de exceptie select returneaza o lista nula si afiseaza in consola codul de eroare.
		-> update returneaza 0  daca update-ul s-a facut cu succes;
			  returneaza -1 daca id-ul este null/0 sau intrarea nu exista in baza de date;
			  returneaza -7 in cazul unei exceptii si afiseaza codul de eroare in consola.
		->  insert returneaza 0 daca insert-ul s-a facut cu succes;
			   returneaza -1 daca intrarea exista
			   returneaza -7 in cazul unei exceptii si afiseaza codul de eroare in consola;					 In cazul in care se insereaza un obiect cu id null, insertul ii atribuie acestuia un id corespunzator in baza de date folosindu-se o secventa oracle si actualizeaza id-ul in interiorul obiectului in cazul in care reuseste
		->  drop returneaza 0 daca  intrarea a fost stearsa din tabel;
			 returneaza -1 daca intrarea nu exista in tabel;
			 returneaza -7 in cazul unei exceptii si afiseaza codul de eroare in consola.
									
3) Clasele care extind AccessBD sunt AccessAdminBD, AccessProfesorBD, AccessStudentBD si AccessSecretarBD.
4) Clasa AccessAdminBD contine toate metodele de insert/ delete/ update pentru fiecare tabel, precum si urmatoarele metode specifice: 
		-> setDataSustinere primeste ca argumente id-ul unui student si o data in format Timestamp si seteaza in tabelul detalii_licente data la care studentul respectiv va sustine lucrarea;
	   		returneaza 0 in caz de succes;
			returneaza -7 in caz de exceptie.
							
		->getDataSustinere returneaza data si ora la care studentul reprezentat de id-ul primit ca parametru va sustine lucrarea de licenta;
			returneaza null in caz de exceptie.
							
		-> getSala returneaza sala in care comisia (reprezentata prin id-ul primit ca parametru) va evalua studentii;
			returneaza null in caz de exceptie.
							
		->setComisieProfesor primeste ca argumente id-ul unui profesor si id-ul unei sesiuni si adauga in tabela profesori comisia din care face parte;
			returneaza 0 in caz de succes (profesorul a fost adaugat);
			returneaza -7 in cazul in care argumentele primite sunt invalide (<0) sau in caz de exceptie.
							
		->setMembruComisie primeste ca argumente pozitia pe care va fi adaugat noul membru in comisie, id-ul profesorului si id-ul comisiei;
	     		returneaza -1 daca comisia nu exista;
	       		returneaza -2 daca pozita este invalida (<1 sau >4);
			returneaza -7 in caz de exceptie.
			Daca parametrii sunt corect specificati apeleaza metoda setComisieProfesor (vezi setComisieProfesor).	
							
		->setSalaComisie pentru comisia reprezentata prin id-ul primit ca parametru seteaza sala (primita ca parametru) in care aceasta va evalua studentii si lucrarile acestora;
			returneaza 0 in caz de succes;
			returneaza -7 daca comisia nu exista sau in caz de exceptie.
							
		->setFisierLucrare primeste ca parametri id-ul unui student si fisierul cu lucrarea acestuia;
	     		returneaza 0 daca s-a efectuat cu succes adaugara fisierului in baza de date;
			returneaza -7 daca id-ul studentului este invalid sau in caz de exceptie.
						
		->getFisierLucrare returneaza fisierul pe care studentul, reprezentat prin id-ul primit ca parametru, l-a introdus in baza de date;
	     		returneaza null in caz de exceptie.
			
		->updateSesiuneActive returneaza 0 daca valoarea primita ca parametru a fost introdusa in campul active din tabelul sesiuni;
	    		returneaza -7 in caz de exceptie.
			
		->profesoriCoordonatoriFaraComisie
	    		returneaza lista profesorilor care au studenti coordonati, dar nu fac parte din nicio comisie;
			returneaza null in caz de exceptie.
						
		->creareComisie primeste ca argument o valoare intreaga, reprezentand tipul comisiei (0 pentru licenta, orice alta valoare de tip int pentru dizertatie) si apeleaza metoda insertComisie() (vezi insertComisie()).
					       
		-> schimbaComisie permite mutarea unui profesor de la o comisie la alta
			returneaza 1 daca profesorul a fost mutat de la comisia veche la comisia noua;
			returneaza -1 in caz de exceptie sau daca profesorul nu a fost mutat la comisia noua din alte motive.
		-> selectCoordonatori 
			returneaza lista cu id-urile profesorilor (memorata sub forma de vector) care sunt coordonatori din comisia reprezentata prin id-ul primit ca parametru;
		        returneaza un vector ce are valoare 0 pe toate pozitiile in cazul in care in comisie nu exista niciun profesor coordonator.
							
5) Clasa AccessProfesorBD contine urmatoarele metode:
		-> selectMesaje
		-> selectDetaliiLicente
		-> selectLicente
		-> selectSesiuni
		-> selectStudenti
		-> selectProfesori
		-> updateStudent
		-> updateLicenta
		-> updateDetaliiLicente
		-> insertMesaj.
	Signatura si functionalitatea lor este descrisa la paragrafele 2) si 4).
	
6) Clasa AccessSecretarBD contine urmatoarele metode:
		-> selectMesaje
		-> selectStudenti
		-> selectProfesori
		-> selectComisii
		-> slectDetaliiLicente
		-> selectLicente
		-> selectSesiuni
		-> updateStudent
		-> updateProfesor
		-> updateComisie
		-> updateDetaliiLicenta
		-> updateLicenta
		-> insertMesaj
		-> insertComisie.
	Signatura si functionalitatea lor este descrisa la paragrafele 2) si 4).
	
7)Clasa AccessStudentBD contine urmatoarele metode:
		-> selectDetaliiLicente
		-> selectLicente
		-> selectMesaje
		-> selectStudenti
		-> selectProfesori
		-> updateStudent
		-> updateLicenta
		-> insertDetaliiLicenta
		-> insertLicenta
		-> insertMesaj
	Signatura si functionalitatea lor este descrisa la paragrafele 2) si 4). 
