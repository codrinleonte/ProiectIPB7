Lista metode necesare pentru frontend:

1.
Descriere: Metoda utilizata pentru intregistrare.
Input:  - adresa_email (String)
		- parola (String)
Output: - result (Boolean) (true - daca email-ul de inregistare a fost trimis, false - in caz de orice alta eroare)



2.
Descriere: Metoda utilizata pentru confirmarea contului
Input: - confirm_token (String) (un hash primit pe email ce activeaza contul. Ex: Link-ul din mail: http://localhost:4200/activate?=abcde 
								 va avea confirm_token-ul: "abcde")
Output: - result (Boolean) (true - contul s-a activat cu succes, false - orice alta eroare (ex: cont deja activat))



3.
Descriere: Metoda utilizata pentru autentificare.
Input:  - adresa_email (String)
		- parola (String)		
Output: - auth_token (String) (daca adresa de email si parola se match-uiesc returneaza un hash ce poate
								fi utilizat pentru apelarea in mod securizat a celorlalte metode, daca nu un empty string)
								

								
NOTA: Urmatoarele functii ar trebui sa primeasca ca input in header auth_token-ul de la autentificare pe langa celelalte argumente,
	  iar functiile sa returneze access denied daca token-ul este invalid din motive de securitate.

	  

4.
Descriere: Metoda utilizata pentru obtinerea informatiilor unui cont in functie de auth_token.
Input:  - None
Output: - nume (String)
		- prenume (String)
		- email (String)
		- clasa_cont (String) (Valori posibile: Student, Profesor, Secretar, Admin)

	
	
5.
Descriere: Metoda utilizata pentru obtinerea unei liste cu toti profesorii.
Input:  - None
Output: - O lista de structuri de forma: { int id; String nume_prof; String prenume_prof; String email_prof; int id_comisie; } 
			(-1 pe id_comisie daca acesta este neasignat unei comisii)


	  
6.
Descriere: Metoda utilizata pentru inscrierea unei lucrari de licenta la examen. (NOTA: Pe moment ignoram upload-ul fisierelor pana gasesc 
			cea mai optima metoda pentru a face asta)
Input:  - nume_lucrare_licenta (String)
		- id_profesor_coordonator (String) (se obtine de la metoda nr. 5)
		- descriere_lucrare_licenta (String)
Output: - result (Boolean) (true - daca totul s-a desfasurat cu succes, false - altfel)



7.
Descriere: Metoda ce returneaza nota obtinuta a utilizatorului curent la examen (metoda apelata doar de utilizatori cu clasa student).
Input:  - id_stud (Integer)
Output: - valoare_nota (Integer) (-1 daca nota nu exista)



8.
Descriere: Metoda utilizata pentru obtinerea unei liste de studenti impreuna cu notele obtinute de acestia.
Input:  - numar_pagina (Integer)
Output: - O lista cu 10 structuri de forma: { String nume_stud; String prenume_stud; int nota_finala; } (Ex: daca numar_pagina = 1 se returneaza 
		  structurile 1-10, daca numar_pagina = 2 se returneaza structurile 11-20, etc)
		  
		  
		  
9.
Descriere: Metoda ce returneaza o lista de comisii.
Input:  - None
Output: - O lista de comisii de forma: { int id; }



10.
Descriere: Metoda ce returneaza profesorii dintr-o comisie.
Input:  - id_comisie (Integer)
Output: - Lista de profesori din acea comisie (o lista cu id-urile acestora este destul, se poate folosi metoda nr. 5 pentru alte informatii).



11.
Descriere: Metoda ce returneaza profesorii neasignati unei comisii.
Input:  - None
Output: - Lista de profesori neasignati (o lista cu id-urile acestora este destul, se poate folosi metoda nr. 5 pentru alte informatii).



12.
Descriere: Metoda ce va muta un profesor din orice comisie ar fi (s-au daca nu este asignat unei comisii) in comisia specificata.
Input:  - id_prof (Integer)
		- id_comisie (Integer)
Output: - result (true - daca profesorul a fost mutat, false - din orice alt motiv)



13.
Descriere: Metoda utilizata pentru obtinerea unei liste cu studentii ce trebuie evaluati de o anumita comisie.
Input:  - id_comisie (Integer)
Output: - Lista de studenti ce trebuie evaluati de forma: { int id_stud; String nume_stud; String prenume_stud; }



14.
Descriere: Metoda ce permite trecerea unei note, de catre un profesor, unui student.
Input:  - id_prof (Integer)
		- id_stud (Integer)
		- valoare_nota (Integer)
Output: - result (true - daca nota a fost trecuta, false - din orice alt motiv)



15.
Descriere: Metoda utilizata pentru obtinerea unei liste de studenti indrumati de un anumit profesor
Input:  - id_prof (Integer)
Output: - Lista de studenti indrumati de profesor de forma: { int id_stud; String nume_stud; String prenume_stud; int nota_finala; int nota1, nota2, nota3, nota4; }
			(daca notele nu exista se reurneaza -1 pe fiecare dintre ele)
			
			
			
16.
Descriere: Metoda ce adauga un student la lista de studenti indrumati de un anumit profesor
Input:  - id_prof (Integer)
		- nume_stud (String)
		- prenume_stud (String)
Output: - result (Boolean) (true - daca studentul a fost adauga, false - orice alt motiv)



17.
Descriere: Metoda ce elimina un student din lista de studenti indrmati de un anumit profesor.
Input:  - id_prof (Integer)
		- id_stud (Integer)
Output: - result (Boolean) (true - daca studentul a fost eliminat din lista, false - orice alt motiv)



18.
Descriere: Metoda ce permite editarea datei de examinare a unei anumite comisii.
Input:  - id_comisie (Integer)
		- data_examinare (String) (forma data: 'DD-MM-YYYY')
Output: - result (Boolean) (true - daca data a fost modificata, false - orice alt motiv)



19.
Descriere: Metoda ce returneaza o tabela cu toti studentii si notele obtinute de acestia (metoda utilizata de secretar).
Input:  - None
Output: - Ce vreti voi, noi luam datele si le bagam intr-un PDF. Un exemplu ar fi o lista de structuri de forma: {String nume; String prenume; int nota;}



20.
Descriere: Metoda ce returneaza o tabela cu repartizarea pe sali a studentilor (metoda utilizata de admin).
Input:  - None
Output: - Tot la fel, ce considerati voi a fi relevant, noi preluam si punem in PDF.